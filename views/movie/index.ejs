
<div class="row">
  <div class="col-sm-2 navbar-btn navbar-right">
    <div class="input-group">
      <input type="text" data-bind="value: searchQuery" class="form-control">
      <span class="input-group-btn">
        <button class="btn btn-default" data-bind="click: search" type="button"><span class="glyphicon glyphicon-search"></span></button>
      </span>
    </div>
  </div>
</div>

<div class="container movie-table-container" data-bind="template: {name: 'movie-template', foreach: movies}, event: {scroll: scrolled}">
</div>

<script type="text/html" id="movie-template">
  <div class="movie-container">
    <div class="movie-title-container">
      <h5 data-bind="text: title"></h5>
      <img data-bind="attr: {src: imageUrl}" />
    </div>
    <div class="rating-container">
      <div class="rating-box" data-bind="css:{ 'rating-box-active': currentUserRating() == 1}">1</div>
      <div class="rating-box" data-bind="css:{ 'rating-box-active': currentUserRating() == 2}">2</div>
      <div class="rating-box" data-bind="css:{ 'rating-box-active': currentUserRating() == 3}">3</div>
      <div class="rating-box" data-bind="css:{ 'rating-box-active': currentUserRating() == 4}">4</div>
      <div class="rating-box" data-bind="css:{ 'rating-box-active': currentUserRating() == 5}">5</div>
      <div class="rating-box" data-bind="css:{ 'rating-box-active': currentUserRating() == 6}">6</div>
      <div class="rating-box" data-bind="css:{ 'rating-box-active': currentUserRating() == 7}">7</div>
      <div class="rating-box" data-bind="css:{ 'rating-box-active': currentUserRating() == 8}">8</div>
      <div class="rating-box" data-bind="css:{ 'rating-box-active': currentUserRating() == 9}">9</div>
      <div class="rating-box" data-bind="css:{ 'rating-box-active': currentUserRating() == 10}">10</div>
    </div>
</div>
</script>

<script type="text/javascript">
  function MovieViewModel(data) {
    var self = this;
    self.id = ko.observable(data.id || '');
    //self.externalId = ko.observable(data.externalId);
    self.currentUserRating = ko.observable();
    self.title = ko.observable(data.title || '');
    self.imageUrl = ko.observable(data.posters.original || '');
  }

  function MoviesViewModel() {
    var self = this;
    self.totalResults = ko.observable(0);
    self.movies = ko.observableArray([]);
    self.searchParameters = ko.observable();
    self.page = ko.observable(0);
    self.itemsToGet = 36;
    self.getting = ko.observable(false);
    self.maxInView = self.itemsToGet * 3;
    self.searchQuery = ko.observable();

    self.getMovies = function(direction){
      if (self.totalResults() == self.movies().length && self.movies().length != 0) return;

      if (self.getting() === true) return;
      self.getting(true);

      self.page(self.page() + 1);

      $.ajax({
        type: "POST",
        url: "/movie/search",
        data: {page: self.page(), page_limit: self.itemsToGet },
        success: function(data){
            self.totalResults(data.total);
            _.each(data.movies, function(movie, i){
              if (i+1 == data.total) return;
              self.movies.push(new MovieViewModel(movie));
            });
            //console.dir(data);
            if (self.movies().length > self.maxInView){
            //remove first or last n
            //var spliceLocation = direction == "top" ? self.maxInView - 1 : 0;
            //self.movies.splice(spliceLocation, self.itemsToGet);
            //console.dir(self.movies().length);
            }
            self.getting(false);
            //console.dir(self.movies);
        }
      });
    }

    self.scrolled = function(data, event){
      //determine range
      var el = event.target;
      var cols = Math.floor($(el).width() / 166);
      var totalRows = self.movies().length / cols;
      var rowHeight = 180;
      var viewRows = Math.floor($(el).height() / rowHeight);

      //only have 3 x viewRows loaded at a time
      //re-load when halfway through the first (if scrolling up) or last (if scrolling down)

      //var triggerTopPosition = rowHeight * viewRows * .5;
      var triggerBottomPosition = rowHeight * (totalRows - 1);


      //console.dir($(el).scrollTop());
      //console.dir(triggerBottomPosition);

      if ($(el).scrollTop() > triggerBottomPosition){
        self.getMovies("bottom");
      }
    }

    self.search = function(){
      self.movies([]);
      $.ajax({
        type: "POST",
        url: "/movie/search",
        data: {page: self.page(), page_limit: self.itemsToGet, q: self.searchQuery() },
        success: function(data){
            self.totalResults(data.total);
            _.each(data.movies, function(movie, i){
              if (i+1 == data.total) return;
              self.movies.push(new MovieViewModel(movie));
            });
            //console.dir(data);
            if (self.movies().length > self.maxInView){
            //remove first or last n
            //var spliceLocation = direction == "top" ? self.maxInView - 1 : 0;
            //self.movies.splice(spliceLocation, self.itemsToGet);
            //console.dir(self.movies().length);
            }
            self.getting(false);
            //console.dir(self.movies);
        }
      });
    }
  }

  function searchParametersViewModel() {
    var self = this;
    var years = ko.observableArray([]);
  }
  var vm;
  $(function(){
    vm = new MoviesViewModel();
    ko.applyBindings(vm);
    vm.getMovies();
  });
</script>
